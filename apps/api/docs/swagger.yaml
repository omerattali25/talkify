basePath: /api
definitions:
  handlers.ChangePasswordInput:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  handlers.CreateConversationRequest:
    properties:
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - user_id
    type: object
  handlers.CreateMessageRequest:
    properties:
      content:
        example: Hello, how are you?
        type: string
      conversation_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      group_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      media_duration:
        example: 60
        type: integer
      media_size:
        example: 1024
        type: integer
      media_thumbnail_url:
        example: https://example.com/thumbnail.jpg
        type: string
      media_url:
        example: https://example.com/image.jpg
        type: string
      message_type:
        allOf:
        - $ref: '#/definitions/models.MessageType'
        example: text
      reply_to_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - content
    - message_type
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.UpdateMessageRequest:
    properties:
      content:
        example: Updated message content
        type: string
    required:
    - content
    type: object
  handlers.UpdateUserRequest:
    properties:
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      email:
        example: john@example.com
        type: string
      phone:
        example: "+1234567890"
        type: string
      status:
        example: Hello, I'm using Talkify!
        type: string
      username:
        example: johndoe
        type: string
    type: object
  models.Conversation:
    properties:
      created_at:
        type: string
      id:
        type: string
      participants:
        items:
          $ref: '#/definitions/models.ConversationParticipant'
        type: array
      updated_at:
        type: string
    type: object
  models.ConversationParticipant:
    properties:
      conversation_id:
        type: string
      joined_at:
        type: string
      last_read_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.CreateUserInput:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - phone
    - username
    type: object
  models.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Message:
    properties:
      content:
        type: string
      conversation_id:
        type: string
      created_at:
        type: string
      group_id:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      is_edited:
        type: boolean
      media_duration:
        type: integer
      media_size:
        type: integer
      media_thumbnail_url:
        type: string
      media_url:
        type: string
      message_type:
        $ref: '#/definitions/models.MessageType'
      reply_to:
        $ref: '#/definitions/models.Message'
      reply_to_id:
        type: string
      sender:
        $ref: '#/definitions/models.User'
      sender_id:
        type: string
      updated_at:
        type: string
    type: object
  models.MessageType:
    enum:
    - text
    - image
    - video
    - audio
    - file
    - location
    type: string
    x-enum-varnames:
    - TextMessage
    - ImageMessage
    - VideoMessage
    - AudioMessage
    - FileMessage
    - LocationMessage
  models.User:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_online:
        type: boolean
      last_seen:
        type: string
      phone:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@talkify.com
    name: API Support
    url: http://www.swagger.io/support
  description: A modern chat application API with support for direct messages and
    group chats.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Talkify API
  version: "1.0"
paths:
  /conversations:
    get:
      consumes:
      - application/json
      description: Get all conversations for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Conversation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user conversations
      tags:
      - conversations
    post:
      consumes:
      - application/json
      description: Start a new conversation with another user
      parameters:
      - description: Conversation information
        in: body
        name: conversation
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateConversationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Conversation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new conversation
      tags:
      - conversations
  /conversations/{id}:
    get:
      consumes:
      - application/json
      description: Get conversation details including participants
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Conversation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get conversation by ID
      tags:
      - conversations
  /conversations/{id}/read:
    post:
      consumes:
      - application/json
      description: Mark all messages in a conversation as read for the authenticated
        user
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Mark conversation as read
      tags:
      - conversations
  /messages:
    post:
      consumes:
      - application/json
      description: Send a new message in a conversation or group
      parameters:
      - description: Message information
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new message
      tags:
      - messages
  /messages/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a message
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete message
      tags:
      - messages
    put:
      consumes:
      - application/json
      description: Update the content of an existing message
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated message content
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update message
      tags:
      - messages
  /messages/{id}/status:
    post:
      consumes:
      - application/json
      description: Update the delivery/read status of a message
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Message status (delivered or read, default: read)'
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update message status
      tags:
      - messages
  /messages/conversation/{id}:
    get:
      consumes:
      - application/json
      description: Get messages from a specific conversation with pagination
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Number of messages to return (default: 50)'
        in: query
        name: limit
        type: integer
      - description: 'Number of messages to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get conversation messages
      tags:
      - messages
  /messages/group/{id}:
    get:
      consumes:
      - application/json
      description: Get messages from a specific group with pagination
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Number of messages to return (default: 50)'
        in: query
        name: limit
        type: integer
      - description: 'Number of messages to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get group messages
      tags:
      - messages
  /users:
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return their details
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the profile of the currently authenticated user
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update current user profile
      tags:
      - users
  /users/me/password:
    put:
      consumes:
      - application/json
      description: Change the password of the currently authenticated user
      parameters:
      - description: Password change info
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Change user password
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-User-ID
    type: apiKey
swagger: "2.0"
